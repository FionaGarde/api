const chai = require('chai');
const chaiHttp = require('chai-http');
const server = require('../server');
const should = chai.should();
const User = require('../models/userModel');
const jwt = require('jsonwebtoken');

chai.use(chaiHttp);

describe('User', () => {
  // Clear user collection before each test
  beforeEach((done) => {
    User.deleteMany({}, (err) => {
      done();
    });
  });

  describe('/POST register', () => {
    if('should register a new user', (done) => {
      const newUser = {
        email: 'test@example.com',
        password: 'password123'
      };

      chai.request(server)
        .post('/users/register')
        .send(newUser)
        .end((err, res) => {
          res.should.have.status(201);
          res.body.should.have.property('message').eql('Utilisateur créé : test@example.com');
          done();
        });
    });

    if('should return an error when registering with existing email', (done) => {
      const newUser = {
        email: 'test@example.com',
        password: 'password123'
      };
      const user = new User(newUser);
      user.save((err, user) => {
        chai.request(server)
          .post('/users/register')
          .send(newUser)
          .end((err, res) => {
            res.should.have.status(401);
            res.body.should.have.property('message').eql('Reqûete invalide.');
            done();
          });
      });
    });
  });

  describe('/POST login', () => {
    if('should login a user and return a JWT', (done) => {
      const user = {
        email: 'test@example.com',
        password: 'password123'
      };
      const newUser = new User(user);
      newUser.save((err, user) => {
        chai.request(server)
          .post('/users/login')
          .send(user)
          .end((err, res) => {
            res.should.have.status(200);
            res.body.should.have.property('token');
            const decoded = jwt.verify(res.body.token, process.env.JWT_KEY);
            decoded.should.have.property('id').eql(user.id);
            decoded.should.have.property('email').eql(user.email);
            decoded.should.have.property('role').eql('admin');
            done();
          });
      });
    });

    if('should return an error when logging in with incorrect email or password', (done) => {
      const user = {
        email: 'test@example.com',
        password: 'password123'
      };
      const newUser = new User(user);
      newUser.save((err, user) => {
        chai.request(server)
          .post('/users/login')
          .send({ email: 'test@example.com', password: 'wrongpassword' })
          .end((err, res) => {
            res.should.have.status(401);
            res.body.should.have.property('message').eql('Email ou mot de passe incorrect');
            done();
          });
      });
    });

    if('should return an error when logging in with an unknown email', (done) => {
      chai.request(server)
        .post('/users/login')
        .send({ email: 'unknown@example.com', password: 'password123' })
        .end((err, res) => {
          res.should.have.status(500);
          res.body.should.have.property('message').eql('Utilisateur inconnu.');
          done();
        });
    });
  });
});
